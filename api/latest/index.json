{"repository_name":"sanitize","body":"# sanitize\n\n`sanitize` is a Crystal library for transforming HTML/XML trees. It's primarily\nused to sanitize HTML from untrusted sources in order to prevent\n[XSS attacks](http://en.wikipedia.org/wiki/Cross-site_scripting) and other\nadversities.\n\nIt builds on stdlib's [`XML`](https://crystal-lang.org/api/XML.html) module to\nparse HTML/XML. Based on [libxml2](http://xmlsoft.org/) it's a solid parser and\nturns malformed and malicious input into valid and safe markup.\n\n* Code: [https://github.com/straight-shoota/sanitize](https://github.com/straight-shoota/sanitize)\n* API docs: [https://straight-shoota.github.io/sanitize/api/latest/](https://straight-shoota.github.io/sanitize/api/latest/)\n* Issue tracker: [https://github.com/straight-shoota/sanitize/issues](https://github.com/straight-shoota/sanitize/issues)\n* Shardbox: [https://shardbox.org/shards/sanitize](https://shardbox.org/shards/sanitize)\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     sanitize:\n       github: straight-shoota/sanitize\n   ```\n\n2. Run `shards install`\n\n## Sanitization Features\n\nThe `Sanitize::Policy::HTMLSanitizer` policy applies the following sanitization steps. Except\nfor the first one (which is essential to the entire process), all can be disabled\nor configured.\n\n* Turns malformed and malicious HTML into valid and safe markup.\n* Strips HTML elements and attributes not included in the safe list.\n* Sanitizes URL attributes (like `href` or `src`) with customizable sanitization\n  policy.\n* Adds `rel=\"nofollow\"` to all links and `rel=\"noopener\"` to links with `target`.\n* Validates values of accepted attributes `align`, `width` and `height`.\n* Filters `class` attributes based on a whitelist (by default all classes are\n  rejected).\n\n## Usage\n\nTransformation is based on rules defined by `Sanitize::Policy` implementations.\n\nThe recommended standard policy for HTML sanitization is `Sanitize::Policy::HTMLSanitizer.common`\nwhich represents good defaults for most use cases.\nIt sanitizes user input against a known safe list of accepted elements and their\nattributes.\n\n```crystal\nrequire \"sanitize\"\n\nsanitizer = Sanitize::Policy::HTMLSanitizer.common\nsanitizer.process(%(<a href=\"javascript:alert('foo')\">foo</a>)) # => %(foo)\nsanitizer.process(%(<p><a href=\"foo\">foo</a></p>)) # => %(<p><a href=\"foo\" rel=\"nofollow\">foo</a></p>)\nsanitizer.process(%(<img src=\"foo.jpg\">)) # => %(<img src=\"foo.jpg\">)\nsanitizer.process(%(<table><tr><td>foo</td><td>bar</td></tr></table>)) # => %(<table><tr><td>foo</td><td>bar</td></tr></table>)\n```\n\nSanitization should always run after any other processing (for example rendering\nMarkdown) and is a must when including HTML from untrusted sources into a web\npage.\n\n### With Markd\n\nA typical format for user generated content is `Markdown`. Even though it has\nonly a very limited feature set compared to HTML, it can still produce\npotentially harmful HTML and is is usually possible to embed raw HTML directly.\nSo Sanitization is necessary.\n\nThe most common Markdown renderer is [markd](https://shardbox.org/shards/markd),\nso here is a sample how to use it with `sanitize`:\n\n````crystal\nsanitizer = Sanitize::Policy::HTMLSanitizer.common\n# Allow classes with `language-` prefix which are used for syntax highlighting.\nsanitizer.valid_classes << /language-.+/\n\nmarkdown = <<-MD\n  Sanitization with [https://shardbox.org/shards/sanitize](sanitize) is not that\n  **difficult**.\n  ```cr\n  puts \"Hello World!\"\n  ```\n  <p><a href=\"javascript:alert(\"XSS attack!\")\">Hello world!</a></p>\n  MD\n\nhtml = Markd.to_html(markdown)\nsanitized = sanitizer.process(html)\nputs sanitized\n````\n\nThe result:\n\n```html\n<p>Sanitization with <a href=\"sanitize\" rel=\"nofollow\">https://shardbox.org/shards/sanitize</a> is not that\n<strong>difficult</strong>.</p>\n<pre><code class=\"language-cr\">puts &quot;Hello World!&quot;\n</code></pre>\n<p>Hello world!</p>\n```\n\n## Limitations\n\nSanitizing CSS is not supported. Thus `style` attributes can't be accepted in a\nsafe way.\nCSS sanitization features may be added when a CSS parsing library is available.\n\n## Security\n\nIf you want to privately disclose security-issues, please contact\n[straightshoota](https://keybase.io/straightshoota) on Keybase or\n[straightshoota@gmail.com](mailto:straightshoota@gmail.com) (PGP: `DF2D C9E9 FFB9 6AE0 2070 D5BC F0F3 4963 7AC5 087A`).\n\n## Contributing\n\n1. Fork it ([https://github.com/straight-shoota/sanitize/fork](https://github.com/straight-shoota/sanitize/fork))\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Johannes MÃ¼ller](https://github.com/straight-shoota) - creator and maintainer\n","program":{"html_id":"sanitize/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"sanitize","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"sanitize/Sanitize","path":"Sanitize.html","kind":"module","full_name":"Sanitize","name":"Sanitize","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"sanitize/Sanitize/Adapter","path":"Sanitize/Adapter.html","kind":"module","full_name":"Sanitize::Adapter","name":"Adapter","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"sanitize/Sanitize/Adapter/LibXML2","kind":"struct","full_name":"Sanitize::Adapter::LibXML2","name":"LibXML2"}],"namespace":{"html_id":"sanitize/Sanitize","kind":"module","full_name":"Sanitize","name":"Sanitize"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"end_tag(name:String,attributes:Hash(String,String)):Nil-instance-method","html_id":"end_tag(name:String,attributes:Hash(String,String)):Nil-instance-method","name":"end_tag","doc":null,"summary":null,"abstract":true,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String)) : Nil","source_link":null,"def":{"name":"end_tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}},{"id":"start_tag(name:String,attributes:Hash(String,String)):Nil-instance-method","html_id":"start_tag(name:String,attributes:Hash(String,String)):Nil-instance-method","name":"start_tag","doc":null,"summary":null,"abstract":true,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String)) : Nil","source_link":null,"def":{"name":"start_tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}},{"id":"write_text(text:String):Nil-instance-method","html_id":"write_text(text:String):Nil-instance-method","name":"write_text","doc":null,"summary":null,"abstract":true,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Nil","source_link":null,"def":{"name":"write_text","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"sanitize/Sanitize/Adapter/LibXML2","path":"Sanitize/Adapter/LibXML2.html","kind":"struct","full_name":"Sanitize::Adapter::LibXML2","name":"LibXML2","abstract":false,"superclass":{"html_id":"sanitize/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"sanitize/Sanitize/Adapter","kind":"module","full_name":"Sanitize::Adapter","name":"Adapter"},{"html_id":"sanitize/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"sanitize/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"sanitize/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"sanitize/Sanitize/Adapter","kind":"module","full_name":"Sanitize::Adapter","name":"Adapter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize/Adapter","kind":"module","full_name":"Sanitize::Adapter","name":"Adapter"},"doc":null,"summary":null,"class_methods":[{"id":"build(fragment:Bool,&)-class-method","html_id":"build(fragment:Bool,&)-class-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[{"name":"fragment","doc":null,"default_value":"","external_name":"fragment","restriction":"Bool"}],"args_string":"(fragment : Bool, &)","source_link":null,"def":{"name":"build","args":[{"name":"fragment","doc":null,"default_value":"","external_name":"fragment","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"result = String.build do |io|\n  builder = XML::Builder.new(io)\n  if fragment\n    builder.start_element(\"fragment\")\n  end\n  yield builder\nend\nif fragment\n  if result == \"<fragment/>\\n\"\n    result = \"\"\n  end\n  result = (result.lchop(\"<fragment>\")).rchop(\"</fragment>\\n\")\nend\nif result.ends_with?(\"\\n\")\n  result\nelse\n  result.rstrip\nend\n"}},{"id":"parse(html:String,fragment:Bool)-class-method","html_id":"parse(html:String,fragment:Bool)-class-method","name":"parse","doc":null,"summary":null,"abstract":false,"args":[{"name":"html","doc":null,"default_value":"","external_name":"html","restriction":"String"},{"name":"fragment","doc":null,"default_value":"","external_name":"fragment","restriction":"Bool"}],"args_string":"(html : String, fragment : Bool)","source_link":null,"def":{"name":"parse","args":[{"name":"html","doc":null,"default_value":"","external_name":"html","restriction":"String"},{"name":"fragment","doc":null,"default_value":"","external_name":"fragment","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if fragment\n  html = \"<html><body>#{html}</body></html>\"\nend\nnode = XML.parse_html(html, (XML::HTMLParserOptions.default | XML::HTMLParserOptions::NOIMPLIED) | XML::HTMLParserOptions::NODEFDTD)\n"}},{"id":"process(policy:Policy,html:String,fragment:Bool=false)-class-method","html_id":"process(policy:Policy,html:String,fragment:Bool=false)-class-method","name":"process","doc":null,"summary":null,"abstract":false,"args":[{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":"Policy"},{"name":"html","doc":null,"default_value":"","external_name":"html","restriction":"String"},{"name":"fragment","doc":null,"default_value":"false","external_name":"fragment","restriction":"Bool"}],"args_string":"(policy : Policy, html : String, fragment : Bool = <span class=\"n\">false</span>)","source_link":null,"def":{"name":"process","args":[{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":"Policy"},{"name":"html","doc":null,"default_value":"","external_name":"html","restriction":"String"},{"name":"fragment","doc":null,"default_value":"false","external_name":"fragment","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if html.empty?\n  return \"\"\nend\nnode = parse(html, fragment)\nprocess(policy, node, fragment)\n"}},{"id":"process(policy:Policy,node:XML::Node,fragment:Bool=false)-class-method","html_id":"process(policy:Policy,node:XML::Node,fragment:Bool=false)-class-method","name":"process","doc":null,"summary":null,"abstract":false,"args":[{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":"Policy"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"XML::Node"},{"name":"fragment","doc":null,"default_value":"false","external_name":"fragment","restriction":"Bool"}],"args_string":"(policy : Policy, node : XML::Node, fragment : Bool = <span class=\"n\">false</span>)","source_link":null,"def":{"name":"process","args":[{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":"Policy"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"XML::Node"},{"name":"fragment","doc":null,"default_value":"false","external_name":"fragment","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"build(fragment) do |builder|\n  process(policy, node, builder, fragment)\nend"}},{"id":"process(policy:Policy,node:XML::Node,builder:XML::Builder,fragment:Bool=false)-class-method","html_id":"process(policy:Policy,node:XML::Node,builder:XML::Builder,fragment:Bool=false)-class-method","name":"process","doc":null,"summary":null,"abstract":false,"args":[{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":"Policy"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"XML::Node"},{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"},{"name":"fragment","doc":null,"default_value":"false","external_name":"fragment","restriction":"Bool"}],"args_string":"(policy : Policy, node : XML::Node, builder : XML::Builder, fragment : Bool = <span class=\"n\">false</span>)","source_link":null,"def":{"name":"process","args":[{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":"Policy"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"XML::Node"},{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"},{"name":"fragment","doc":null,"default_value":"false","external_name":"fragment","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"processor = Processor.new(policy, new(builder))\nvisit(processor, node, fragment)\nbuilder.end_document\nbuilder.flush\n"}},{"id":"visit(processor:Processor,node:XML::Node,fragment:Bool)-class-method","html_id":"visit(processor:Processor,node:XML::Node,fragment:Bool)-class-method","name":"visit","doc":null,"summary":null,"abstract":false,"args":[{"name":"processor","doc":null,"default_value":"","external_name":"processor","restriction":"Processor"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"XML::Node"},{"name":"fragment","doc":null,"default_value":"","external_name":"fragment","restriction":"Bool"}],"args_string":"(processor : Processor, node : XML::Node, fragment : Bool)","source_link":null,"def":{"name":"visit","args":[{"name":"processor","doc":null,"default_value":"","external_name":"processor","restriction":"Processor"},{"name":"node","doc":null,"default_value":"","external_name":"node","restriction":"XML::Node"},{"name":"fragment","doc":null,"default_value":"","external_name":"fragment","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"visitor = Visitor.new(processor, fragment)\nvisitor.visit(node)\n"}}],"constructors":[{"id":"new(builder:XML::Builder)-class-method","html_id":"new(builder:XML::Builder)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"}],"args_string":"(builder : XML::Builder)","source_link":null,"def":{"name":"new","args":[{"name":"builder","doc":null,"default_value":"","external_name":"builder","restriction":"XML::Builder"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(builder)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"end_tag(name:String,attributes:Hash(String,String)):Nil-instance-method","html_id":"end_tag(name:String,attributes:Hash(String,String)):Nil-instance-method","name":"end_tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String)) : Nil","source_link":null,"def":{"name":"end_tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@builder.end_element"}},{"id":"start_tag(name:String,attributes:Hash(String,String)):Nil-instance-method","html_id":"start_tag(name:String,attributes:Hash(String,String)):Nil-instance-method","name":"start_tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String)) : Nil","source_link":null,"def":{"name":"start_tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@builder.start_element(name)\n@builder.attributes(attributes)\n"}},{"id":"write_text(text:String):Nil-instance-method","html_id":"write_text(text:String):Nil-instance-method","name":"write_text","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String) : Nil","source_link":null,"def":{"name":"write_text","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@builder.text(text)"}}],"macros":[],"types":[]}]},{"html_id":"sanitize/Sanitize/Policy","path":"Sanitize/Policy.html","kind":"class","full_name":"Sanitize::Policy","name":"Policy","abstract":true,"superclass":{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"sanitize/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HTML_BLOCK_ELEMENTS","name":"HTML_BLOCK_ELEMENTS","value":"Set {\"address\", \"article\", \"aside\", \"audio\", \"video\", \"blockquote\", \"br\", \"canvas\", \"dd\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hgroup\", \"hr\", \"noscript\", \"ol\", \"output\", \"p\", \"pre\", \"section\", \"table\", \"tfoot\", \"ul\"}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"sanitize/Sanitize/Policy/Text","kind":"class","full_name":"Sanitize::Policy::Text","name":"Text"},{"html_id":"sanitize/Sanitize/Policy/Whitelist","kind":"class","full_name":"Sanitize::Policy::Whitelist","name":"Whitelist"}],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize","kind":"module","full_name":"Sanitize","name":"Sanitize"},"doc":"A policy defines the rules for transforming an HTML/XML tree.\n\n* `HTMLSanitizer` is a policy for HTML sanitization.\n* `Whitelist` is a whitelist-based transformer that's useful either for\n   simple stripping applications or as a building block for more advanced\n   sanitization policies.\n* `Text` is a policy that turns HTML into plain text.","summary":"<p>A policy defines the rules for transforming an HTML/XML tree.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"block_tag?(name)-instance-method","html_id":"block_tag?(name)-instance-method","name":"block_tag?","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(name)","source_link":null,"def":{"name":"block_tag?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"HTML_BLOCK_ELEMENTS.includes?(name)"}},{"id":"block_whitespace:String-instance-method","html_id":"block_whitespace:String-instance-method","name":"block_whitespace","doc":"Defines the string that is added when whitespace is needed when a block tag\nis stripped.","summary":"<p>Defines the string that is added when whitespace is needed when a block tag is stripped.</p>","abstract":false,"args":[],"args_string":" : String","source_link":null,"def":{"name":"block_whitespace","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@block_whitespace"}},{"id":"block_whitespace=(block_whitespace)-instance-method","html_id":"block_whitespace=(block_whitespace)-instance-method","name":"block_whitespace=","doc":"Defines the string that is added when whitespace is needed when a block tag\nis stripped.","summary":"<p>Defines the string that is added when whitespace is needed when a block tag is stripped.</p>","abstract":false,"args":[{"name":"block_whitespace","doc":null,"default_value":"","external_name":"block_whitespace","restriction":""}],"args_string":"(block_whitespace)","source_link":null,"def":{"name":"block_whitespace=","args":[{"name":"block_whitespace","doc":null,"default_value":"","external_name":"block_whitespace","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@block_whitespace = block_whitespace"}},{"id":"process(html:String|XML::Node):String-instance-method","html_id":"process(html:String|XML::Node):String-instance-method","name":"process","doc":"Processes the HTML fragment *html* with this policy using the default\nadapter (`Adapter::LibXML2`).","summary":"<p>Processes the HTML fragment <em>html</em> with this policy using the default adapter (<code><a href=\"../Sanitize/Adapter/LibXML2.html\">Adapter::LibXML2</a></code>).</p>","abstract":false,"args":[{"name":"html","doc":null,"default_value":"","external_name":"html","restriction":"String | XML::Node"}],"args_string":"(html : String | XML::Node) : String","source_link":null,"def":{"name":"process","args":[{"name":"html","doc":null,"default_value":"","external_name":"html","restriction":"String | XML::Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"Adapter::LibXML2.process(self, html, fragment: true)"}},{"id":"process_document(html:String|XML::Node):String-instance-method","html_id":"process_document(html:String|XML::Node):String-instance-method","name":"process_document","doc":"Processes the HTML document *html* with this policy using the default\nadapter (`Adapter::LibXML2`).","summary":"<p>Processes the HTML document <em>html</em> with this policy using the default adapter (<code><a href=\"../Sanitize/Adapter/LibXML2.html\">Adapter::LibXML2</a></code>).</p>","abstract":false,"args":[{"name":"html","doc":null,"default_value":"","external_name":"html","restriction":"String | XML::Node"}],"args_string":"(html : String | XML::Node) : String","source_link":null,"def":{"name":"process_document","args":[{"name":"html","doc":null,"default_value":"","external_name":"html","restriction":"String | XML::Node"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"Adapter::LibXML2.process(self, html, fragment: false)"}},{"id":"transform_tag(name:String,attributes:Hash(String,String)):String|Processor::CONTINUE|Processor::STOP-instance-method","html_id":"transform_tag(name:String,attributes:Hash(String,String)):String|Processor::CONTINUE|Processor::STOP-instance-method","name":"transform_tag","doc":"Receives the element name and attributes of an opening tag and returns the\ntransformed element name (usually the same as the input name).\n\n*attributes* are transformed directly in place.\n\nSpecial return values:\n* `Processor::CONTINUE`: Tells the processor to strip the current tag but\n  continue traversing its children.\n* `Processor::CONTINUE`: Tells the processor to skip the current tag and its\n  children completely and move to the next sibling.","summary":"<p>Receives the element name and attributes of an opening tag and returns the transformed element name (usually the same as the input name).</p>","abstract":true,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String)) : String | Processor::CONTINUE | Processor::STOP","source_link":null,"def":{"name":"transform_tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | Processor::CONTINUE | Processor::STOP","visibility":"Public","body":""}},{"id":"transform_text(text:String):String?-instance-method","html_id":"transform_text(text:String):String?-instance-method","name":"transform_text","doc":"Receives the content of a text node and returns the transformed content.\n\nIf the return value is `nil`, the content is skipped.","summary":"<p>Receives the content of a text node and returns the transformed content.</p>","abstract":true,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String) : String?","source_link":null,"def":{"name":"transform_text","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"sanitize/Sanitize/Policy/HTMLSanitizer","path":"Sanitize/Policy/HTMLSanitizer.html","kind":"class","full_name":"Sanitize::Policy::HTMLSanitizer","name":"HTMLSanitizer","abstract":false,"superclass":{"html_id":"sanitize/Sanitize/Policy/Whitelist","kind":"class","full_name":"Sanitize::Policy::Whitelist","name":"Whitelist"},"ancestors":[{"html_id":"sanitize/Sanitize/Policy/Whitelist","kind":"class","full_name":"Sanitize::Policy::Whitelist","name":"Whitelist"},{"html_id":"sanitize/Sanitize/Policy","kind":"class","full_name":"Sanitize::Policy","name":"Policy"},{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"sanitize/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"BASIC_SAFELIST","name":"BASIC_SAFELIST","value":"INLINE_SAFELIST.merge({\"blockquote\" => Set {\"cite\"}, \"br\" => Set(String).new, \"h1\" => Set(String).new, \"h2\" => Set(String).new, \"h3\" => Set(String).new, \"h4\" => Set(String).new, \"h5\" => Set(String).new, \"h6\" => Set(String).new, \"hr\" => Set(String).new, \"img\" => Set {\"alt\", \"src\", \"longdesc\", \"width\", \"height\", \"align\"}, \"li\" => Set(String).new, \"ol\" => Set {\"start\"}, \"p\" => Set {\"align\"}, \"pre\" => Set(String).new, \"ul\" => Set(String).new})","doc":"Compatible with basic Markdown features.","summary":"<p>Compatible with basic Markdown features.</p>"},{"id":"COMMON_SAFELIST","name":"COMMON_SAFELIST","value":"BASIC_SAFELIST.merge({\"dd\" => Set(String).new, \"del\" => Set {\"cite\"}, \"details\" => Set(String).new, \"dl\" => Set(String).new, \"dt\" => Set(String).new, \"div\" => Set(String).new, \"ins\" => Set {\"cite\"}, \"kbd\" => Set(String).new, \"q\" => Set {\"cite\"}, \"ruby\" => Set(String).new, \"rp\" => Set(String).new, \"rt\" => Set(String).new, \"s\" => Set(String).new, \"samp\" => Set(String).new, \"strike\" => Set(String).new, \"sub\" => Set(String).new, \"summary\" => Set(String).new, \"sup\" => Set(String).new, \"table\" => Set(String).new, \"time\" => Set {\"datetime\"}, \"tbody\" => Set(String).new, \"td\" => Set(String).new, \"tfoot\" => Set(String).new, \"th\" => Set(String).new, \"thead\" => Set(String).new, \"tr\" => Set(String).new, \"tt\" => Set(String).new, \"var\" => Set(String).new})","doc":"Accepts most standard tags and thus allows using a good amount of HTML features.","summary":"<p>Accepts most standard tags and thus allows using a good amount of HTML features.</p>"},{"id":"INLINE_SAFELIST","name":"INLINE_SAFELIST","value":"{\"a\" => Set {\"href\", \"hreflang\"}, \"abbr\" => Set(String).new, \"acronym\" => Set(String).new, \"b\" => Set(String).new, \"code\" => Set(String).new, \"em\" => Set(String).new, \"i\" => Set(String).new, \"strong\" => Set(String).new, \"*\" => Set {\"dir\", \"lang\", \"title\", \"class\"}}","doc":"Only limited elements for inline text markup.","summary":"<p>Only limited elements for inline text markup.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize/Policy","kind":"class","full_name":"Sanitize::Policy","name":"Policy"},"doc":"This policy serves as a good default configuration that should fit most\ntypical use cases for HTML sanitization.\n\n## Configurations\nIt comes in three different configurations with different sets of supported\nHTML tags.\n\nThey only differ in the default configuration of allowed tags and attributes.\nThe transformation behaviour is otherwise the same.\n\n### Common Configuration\n`.common`: Accepts most standard tags and thus allows using a good\namount of HTML features (see `COMMON_SAFELIST`).\n\nThis is the recommended default configuration and should work for typical use\ncases unless strong restrictions on allowed content is required.\n\n```\nsanitizer = Sanitize::Policy::HTMLSanitizer.common\nsanitizer.process(%(<a href=\"javascript:alert('foo')\">foo</a>))        # => %(foo)\nsanitizer.process(%(<p><a href=\"foo\">foo</a></p>))                     # => %(<p><a href=\"foo\" rel=\"nofollow\">foo</a></p>)\nsanitizer.process(%(<img src=\"foo.jpg\">))                              # => %(<img src=\"foo.jpg\">)\nsanitizer.process(%(<table><tr><td>foo</td><td>bar</td></tr></table>)) # => %(<table><tr><td>foo</td><td>bar</td></tr></table>)\n```\n\nNOTE: This configuration (nor any other) does not accept `&lt;html&gt;`,\n`&lt;head&gt;`, or # `&lt;body&gt;` tags by default. In order to use\n`#sanitized_document` they need to be added explicitly to `accepted_arguments`.\n\n### Basic Configuration\n\n`.basic`: This set accepts some basic tags including paragraphs, headlines,\nlists, and images (see `BASIC_SAFELIST`).\n\n```\nsanitizer = Sanitize::Policy::HTMLSanitizer.basic\nsanitizer.process(%(<a href=\"javascript:alert('foo')\">foo</a>))        # => %(foo)\nsanitizer.process(%(<p><a href=\"foo\">foo</a></p>))                     # => %(<p><a href=\"foo\" rel=\"nofollow\">foo</a></p>)\nsanitizer.process(%(<img src=\"foo.jpg\">))                              # => %(<img src=\"foo.jpg\">)\nsanitizer.process(%(<table><tr><td>foo</td><td>bar</td></tr></table>)) # => %(foo bar)\n```\n\n### Inline Configuration\n\n`.inline`: Accepts only a limited set of inline tags (see `INLINE_SAFELIST`).\n\n```\nsanitizer = Sanitize::Policy::HTMLSanitizer.inline\nsanitizer.process(%(<a href=\"javascript:alert('foo')\">foo</a>))        # => %(foo)\nsanitizer.process(%(<p><a href=\"foo\">foo</a></p>))                     # => %(<a href=\"foo\" rel=\"nofollow\">foo</a>)\nsanitizer.process(%(<img src=\"foo.jpg\">))                              # => %()\nsanitizer.process(%(<table><tr><td>foo</td><td>bar</td></tr></table>)) # => %(foo bar)\n```\n\n## Attribute Transformations\n\nAttribute transformations are identical in all three configurations. But more\nadvanced transforms won't apply if the respective attribute is not allowed in\n`accepted_tags`.\nSo you can easily add additional elements and attributes to lower-tier sets\nand get the same attribute validation. For example: `.inline` doesn't include\n`&lt;img&gt;` tags, but when `img` is added to `accepted_attributes`,\nthe policy validates img tags the same way as in `.common`.\n\n### URL Sanitization\n\nThis transformation applies to attributes that contain a URL (configurable\nthrough (`url_attributes`).\n\n* Makes sure the value is a valid URI (via `URI.parse`). If it does not parse,\n  the attribute value is set to empty string.\n* Sanitizes the URI via `URISanitizer (configurable trough `uri_sanitizer`).\n  If the sanitizer returns `nil`, the attribute value is set to empty string.\n\nThe same `URISanitizer` is used for any URL attributes.\n\n### Anchor Tags\n\nFor `&lt;a&gt;` tags with a `href` attribute, there are two transforms:\n\n* `rel=\"nofollow\"` is added (can be disabled with `add_rel_nofollow`).\n* `rel=\"noopener\"` is added to links with `target` attribute (can be disabled\n  with `add_rel_noopener`).\n\nAnchor tags the have neither a `href`, `name` or `id` attribute are stripped.\n\nNOTE: `name` and `id` attributes are not in any of the default sets of\naccepted attributes, so they can only be used when explicitly enabled.\n\n### Image Tags\n\n`&lt;img&gt;` tags are stripped if they don't have a `src` attribute.\n\n### Size Attributes\n\nIf a tag has `width` or `height` attributes, the values are validated to be\nnumerical or percent values.\nBy default, these attributes are only accepted for &lt;img&gt; tags.\n\n### Alignment Attribute\n\nThe `align` attribute is validated against allowed values for this attribute:\n`center, left, right, justify, char`.\nIf the value is invalid, the attribute is stripped.\n\n### Classes\n\n`class` attributes are filtered to accept only classes described by\n`valid_classes`. String values need to match the class name exactly, regex\nvalues need to match the entire class name.\n\n`class` is accepted as a global attribute in the default configuration, but no\nvalues are allowed in `valid_classes`.\n\nAll classes can be accepted by adding the match-all regular expression `/.*/`\nto `valid_classes`.","summary":"<p>This policy serves as a good default configuration that should fit most typical use cases for HTML sanitization.</p>","class_methods":[],"constructors":[{"id":"basic:HTMLSanitizer-class-method","html_id":"basic:HTMLSanitizer-class-method","name":"basic","doc":"Creates an instance which accepts more basic tags including paragraphs,\nheadlines, lists, and images (see `BASIC_SAFELIST`).","summary":"<p>Creates an instance which accepts more basic tags including paragraphs, headlines, lists, and images (see <code><a href=\"../../Sanitize/Policy/HTMLSanitizer.html#BASIC_SAFELIST\">BASIC_SAFELIST</a></code>).</p>","abstract":false,"args":[],"args_string":" : HTMLSanitizer","source_link":null,"def":{"name":"basic","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTMLSanitizer","visibility":"Public","body":"new(accepted_attributes: BASIC_SAFELIST.clone)"}},{"id":"common:HTMLSanitizer-class-method","html_id":"common:HTMLSanitizer-class-method","name":"common","doc":"Creates an instance which accepts even more standard tags and thus allows\nusing a good amount of HTML features (see `COMMON_SAFELIST`).\n\nUnless you need tight restrictions on allowed content, this is the\nrecommended default.","summary":"<p>Creates an instance which accepts even more standard tags and thus allows using a good amount of HTML features (see <code><a href=\"../../Sanitize/Policy/HTMLSanitizer.html#COMMON_SAFELIST\">COMMON_SAFELIST</a></code>).</p>","abstract":false,"args":[],"args_string":" : HTMLSanitizer","source_link":null,"def":{"name":"common","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTMLSanitizer","visibility":"Public","body":"new(accepted_attributes: COMMON_SAFELIST.clone)"}},{"id":"inline:HTMLSanitizer-class-method","html_id":"inline:HTMLSanitizer-class-method","name":"inline","doc":"Creates an instance which accepts a limited set of inline tags (see\n`INLINE_SAFELIST`).","summary":"<p>Creates an instance which accepts a limited set of inline tags (see <code><a href=\"../../Sanitize/Policy/HTMLSanitizer.html#INLINE_SAFELIST\">INLINE_SAFELIST</a></code>).</p>","abstract":false,"args":[],"args_string":" : HTMLSanitizer","source_link":null,"def":{"name":"inline","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTMLSanitizer","visibility":"Public","body":"new(accepted_attributes: INLINE_SAFELIST.clone)"}}],"instance_methods":[{"id":"accept_tag(tag:String,attributes:Set(String)=Set(String).new)-instance-method","html_id":"accept_tag(tag:String,attributes:Set(String)=Set(String).new)-instance-method","name":"accept_tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"attributes","doc":null,"default_value":"Set(String).new","external_name":"attributes","restriction":"Set(String)"}],"args_string":"(tag : String, attributes : Set(String) = <span class=\"t\">Set</span>(<span class=\"t\">String</span>).<span class=\"k\">new</span>)","source_link":null,"def":{"name":"accept_tag","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"attributes","doc":null,"default_value":"Set(String).new","external_name":"attributes","restriction":"Set(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"accepted_attributes[tag] = attributes"}},{"id":"add_rel_nofollow:Bool-instance-method","html_id":"add_rel_nofollow:Bool-instance-method","name":"add_rel_nofollow","doc":"Add `rel=\"nofollow\"` to every `&lt;a&gt;` tag with `href` attribute.","summary":"<p>Add <code>rel=\"nofollow\"</code> to every <code>&lt;a&gt;</code> tag with <code>href</code> attribute.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"add_rel_nofollow","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@add_rel_nofollow"}},{"id":"add_rel_nofollow=(add_rel_nofollow)-instance-method","html_id":"add_rel_nofollow=(add_rel_nofollow)-instance-method","name":"add_rel_nofollow=","doc":"Add `rel=\"nofollow\"` to every `&lt;a&gt;` tag with `href` attribute.","summary":"<p>Add <code>rel=\"nofollow\"</code> to every <code>&lt;a&gt;</code> tag with <code>href</code> attribute.</p>","abstract":false,"args":[{"name":"add_rel_nofollow","doc":null,"default_value":"","external_name":"add_rel_nofollow","restriction":""}],"args_string":"(add_rel_nofollow)","source_link":null,"def":{"name":"add_rel_nofollow=","args":[{"name":"add_rel_nofollow","doc":null,"default_value":"","external_name":"add_rel_nofollow","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@add_rel_nofollow = add_rel_nofollow"}},{"id":"add_rel_noopener:Bool-instance-method","html_id":"add_rel_noopener:Bool-instance-method","name":"add_rel_noopener","doc":"Add `rel=\"noopener\"` to every `&lt;a&gt;` tag with `href` and `target` attribute.","summary":"<p>Add <code>rel=\"noopener\"</code> to every <code>&lt;a&gt;</code> tag with <code>href</code> and <code>target</code> attribute.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"add_rel_noopener","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@add_rel_noopener"}},{"id":"add_rel_noopener=(add_rel_noopener)-instance-method","html_id":"add_rel_noopener=(add_rel_noopener)-instance-method","name":"add_rel_noopener=","doc":"Add `rel=\"noopener\"` to every `&lt;a&gt;` tag with `href` and `target` attribute.","summary":"<p>Add <code>rel=\"noopener\"</code> to every <code>&lt;a&gt;</code> tag with <code>href</code> and <code>target</code> attribute.</p>","abstract":false,"args":[{"name":"add_rel_noopener","doc":null,"default_value":"","external_name":"add_rel_noopener","restriction":""}],"args_string":"(add_rel_noopener)","source_link":null,"def":{"name":"add_rel_noopener=","args":[{"name":"add_rel_noopener","doc":null,"default_value":"","external_name":"add_rel_noopener","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@add_rel_noopener = add_rel_noopener"}},{"id":"append_attribute(attributes,attribute,value)-instance-method","html_id":"append_attribute(attributes,attribute,value)-instance-method","name":"append_attribute","doc":null,"summary":null,"abstract":false,"args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(attributes, attribute, value)","source_link":null,"def":{"name":"append_attribute","args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if curr_value = attributes[attribute]?\n  values = curr_value.split\n  if values.includes?(value)\n    return false\n  else\n    values << value\n    attributes[attribute] = values.join(\" \")\n  end\nelse\n  attributes[attribute] = value\nend\ntrue\n"}},{"id":"no_links-instance-method","html_id":"no_links-instance-method","name":"no_links","doc":"Removes anchor tag (`&lt;a&gt;` from the list of accepted tags).\n\nNOTE: This doesn't reject attributes with URL values for other tags.","summary":"<p>Removes anchor tag (<code>&lt;a&gt;</code> from the list of accepted tags).</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"no_links","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"accepted_attributes.delete(\"a\")\nself\n"}},{"id":"transform_attributes(tag:String,attributes:Hash(String,String)):String|CONTINUE|STOP-instance-method","html_id":"transform_attributes(tag:String,attributes:Hash(String,String)):String|CONTINUE|STOP-instance-method","name":"transform_attributes","doc":null,"summary":null,"abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(tag : String, attributes : Hash(String, String)) : String | CONTINUE | STOP","source_link":null,"def":{"name":"transform_attributes","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | CONTINUE | STOP","visibility":"Public","body":"transform_url_attributes(tag, attributes)\ntag_result = case tag\nwhen \"a\"\n  transform_tag_a(attributes)\nwhen \"img\"\n  transform_tag_img(attributes)\nend\nif tag_result\n  return tag_result\nend\nlimit_numeric_or_percent(attributes, \"width\")\nlimit_numeric_or_percent(attributes, \"height\")\nlimit_enum(attributes, \"align\", [\"center\", \"left\", \"right\", \"justify\", \"char\"])\ntransform_classes(tag, attributes)\ntag\n"}},{"id":"transform_classes(tag,attributes)-instance-method","html_id":"transform_classes(tag,attributes)-instance-method","name":"transform_classes","doc":null,"summary":null,"abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"args_string":"(tag, attributes)","source_link":null,"def":{"name":"transform_classes","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"attribute = attributes[\"class\"]?\nif attribute\nelse\n  return\nend\nclasses = attribute.split\nclasses = classes.select do |klass|\n  valid_class?(tag, klass, valid_classes)\nend\nif classes.empty?\n  attributes.delete(\"class\")\nelse\n  attributes[\"class\"] = classes.join(\" \")\nend\n"}},{"id":"transform_tag_a(attributes)-instance-method","html_id":"transform_tag_a(attributes)-instance-method","name":"transform_tag_a","doc":null,"summary":null,"abstract":false,"args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"args_string":"(attributes)","source_link":null,"def":{"name":"transform_tag_a","args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if href = attributes[\"href\"]?\n  if add_rel_nofollow\n    append_attribute(attributes, \"rel\", \"nofollow\")\n  end\n  if add_rel_noopener && (attributes.has_key?(\"target\"))\n    append_attribute(attributes, \"rel\", \"noopener\")\n  end\nend\nif !((((href = attributes[\"href\"]?) && (!href.empty?)) || (attributes.has_key?(\"id\"))) || (attributes.has_key?(\"tag\")))\n  return CONTINUE\nend\n"}},{"id":"transform_tag_img(attributes)-instance-method","html_id":"transform_tag_img(attributes)-instance-method","name":"transform_tag_img","doc":null,"summary":null,"abstract":false,"args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"args_string":"(attributes)","source_link":null,"def":{"name":"transform_tag_img","args":[{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if attributes.has_key?(\"src\")\nelse\n  return CONTINUE\nend"}},{"id":"transform_uri(tag,attributes,attribute,uri:URI):String?-instance-method","html_id":"transform_uri(tag,attributes,attribute,uri:URI):String?-instance-method","name":"transform_uri","doc":null,"summary":null,"abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"URI"}],"args_string":"(tag, attributes, attribute, uri : URI) : String?","source_link":null,"def":{"name":"transform_uri","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"URI"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"if uri_sanitizer = self.uri_sanitizer\n  uri = uri_sanitizer.sanitize(uri)\n  if uri\n  else\n    return\n  end\nend\nif path = uri.path\n  uri.path = URI.encode(URI.decode(path))\nend\nuri.to_s\n"}},{"id":"transform_url_attribute(tag,attributes,attribute,value)-instance-method","html_id":"transform_url_attribute(tag,attributes,attribute,value)-instance-method","name":"transform_url_attribute","doc":null,"summary":null,"abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(tag, attributes, attribute, value)","source_link":null,"def":{"name":"transform_url_attribute","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  uri = URI.parse(value.strip)\nrescue URI::Error\n  attributes[attribute] = \"\"\n  return false\nend\nuri = transform_uri(tag, attributes, attribute, uri)\nif uri.nil? || (uri.blank? || (uri == \"#\"))\n  attributes[attribute] = \"\"\n  return false\nend\nattributes[attribute] = uri\ntrue\n"}},{"id":"transform_url_attributes(tag,attributes)-instance-method","html_id":"transform_url_attributes(tag,attributes)-instance-method","name":"transform_url_attributes","doc":null,"summary":null,"abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"args_string":"(tag, attributes)","source_link":null,"def":{"name":"transform_url_attributes","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"all_ok = true\nurl_attributes.each do |key|\n  if value = attributes[key]?\n    all_ok && (all_ok = transform_url_attribute(tag, attributes, key, value))\n  end\nend\nall_ok\n"}},{"id":"uri_sanitizer:Sanitize::URISanitizer-instance-method","html_id":"uri_sanitizer:Sanitize::URISanitizer-instance-method","name":"uri_sanitizer","doc":"Configures the `URISanitizer` to use for sanitizing URL attributes.","summary":"<p>Configures the <code><a href=\"../../Sanitize/URISanitizer.html\">URISanitizer</a></code> to use for sanitizing URL attributes.</p>","abstract":false,"args":[],"args_string":" : Sanitize::URISanitizer","source_link":null,"def":{"name":"uri_sanitizer","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@uri_sanitizer"}},{"id":"uri_sanitizer=(uri_sanitizer)-instance-method","html_id":"uri_sanitizer=(uri_sanitizer)-instance-method","name":"uri_sanitizer=","doc":"Configures the `URISanitizer` to use for sanitizing URL attributes.","summary":"<p>Configures the <code><a href=\"../../Sanitize/URISanitizer.html\">URISanitizer</a></code> to use for sanitizing URL attributes.</p>","abstract":false,"args":[{"name":"uri_sanitizer","doc":null,"default_value":"","external_name":"uri_sanitizer","restriction":""}],"args_string":"(uri_sanitizer)","source_link":null,"def":{"name":"uri_sanitizer=","args":[{"name":"uri_sanitizer","doc":null,"default_value":"","external_name":"uri_sanitizer","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@uri_sanitizer = uri_sanitizer"}},{"id":"url_attributes:Set(String)-instance-method","html_id":"url_attributes:Set(String)-instance-method","name":"url_attributes","doc":"Configures which attributes are considered to contain URLs. If empty, URL\nsanitization is disabled.\n\nDefault value: `Set{\"src\", \"href\", \"action\", \"cite\", \"longdesc\"}`.","summary":"<p>Configures which attributes are considered to contain URLs.</p>","abstract":false,"args":[],"args_string":" : Set(String)","source_link":null,"def":{"name":"url_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(String)","visibility":"Public","body":"@url_attributes"}},{"id":"url_attributes=(url_attributes:Set(String))-instance-method","html_id":"url_attributes=(url_attributes:Set(String))-instance-method","name":"url_attributes=","doc":"Configures which attributes are considered to contain URLs. If empty, URL\nsanitization is disabled.\n\nDefault value: `Set{\"src\", \"href\", \"action\", \"cite\", \"longdesc\"}`.","summary":"<p>Configures which attributes are considered to contain URLs.</p>","abstract":false,"args":[{"name":"url_attributes","doc":null,"default_value":"","external_name":"url_attributes","restriction":"Set(String)"}],"args_string":"(url_attributes : Set(String))","source_link":null,"def":{"name":"url_attributes=","args":[{"name":"url_attributes","doc":null,"default_value":"","external_name":"url_attributes","restriction":"Set(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@url_attributes = url_attributes"}},{"id":"valid_class?(tag,klass,valid_classes)-instance-method","html_id":"valid_class?(tag,klass,valid_classes)-instance-method","name":"valid_class?","doc":null,"summary":null,"abstract":false,"args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":""},{"name":"valid_classes","doc":null,"default_value":"","external_name":"valid_classes","restriction":""}],"args_string":"(tag, klass, valid_classes)","source_link":null,"def":{"name":"valid_class?","args":[{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""},{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":""},{"name":"valid_classes","doc":null,"default_value":"","external_name":"valid_classes","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"valid_with_list?(klass, valid_classes)"}},{"id":"valid_classes:Set(String|Regex)-instance-method","html_id":"valid_classes:Set(String|Regex)-instance-method","name":"valid_classes","doc":"Configures which classes are valid for `class` attributes.\n\nString values need to match the class name exactly, regex\nvalues need to match the entire class name.\n\nDefault value: empty","summary":"<p>Configures which classes are valid for <code>class</code> attributes.</p>","abstract":false,"args":[],"args_string":" : Set(String | Regex)","source_link":null,"def":{"name":"valid_classes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(String | Regex)","visibility":"Public","body":"@valid_classes"}},{"id":"valid_classes=(valid_classes:Set(String|Regex))-instance-method","html_id":"valid_classes=(valid_classes:Set(String|Regex))-instance-method","name":"valid_classes=","doc":"Configures which classes are valid for `class` attributes.\n\nString values need to match the class name exactly, regex\nvalues need to match the entire class name.\n\nDefault value: empty","summary":"<p>Configures which classes are valid for <code>class</code> attributes.</p>","abstract":false,"args":[{"name":"valid_classes","doc":null,"default_value":"","external_name":"valid_classes","restriction":"Set(String | Regex)"}],"args_string":"(valid_classes : Set(String | Regex))","source_link":null,"def":{"name":"valid_classes=","args":[{"name":"valid_classes","doc":null,"default_value":"","external_name":"valid_classes","restriction":"Set(String | Regex)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@valid_classes = valid_classes"}},{"id":"valid_classes=(classes)-instance-method","html_id":"valid_classes=(classes)-instance-method","name":"valid_classes=","doc":null,"summary":null,"abstract":false,"args":[{"name":"classes","doc":null,"default_value":"","external_name":"classes","restriction":""}],"args_string":"(classes)","source_link":null,"def":{"name":"valid_classes=","args":[{"name":"classes","doc":null,"default_value":"","external_name":"classes","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"valid_classes = classes.map do |__arg0|\n  __arg0.as(String | Regex)\nend.to_set"}}],"macros":[],"types":[]},{"html_id":"sanitize/Sanitize/Policy/Text","path":"Sanitize/Policy/Text.html","kind":"class","full_name":"Sanitize::Policy::Text","name":"Text","abstract":false,"superclass":{"html_id":"sanitize/Sanitize/Policy","kind":"class","full_name":"Sanitize::Policy","name":"Policy"},"ancestors":[{"html_id":"sanitize/Sanitize/Policy","kind":"class","full_name":"Sanitize::Policy","name":"Policy"},{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"sanitize/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize/Policy","kind":"class","full_name":"Sanitize::Policy","name":"Policy"},"doc":"Reduces an HTML tree to the content of its text nodes.\nIt renders a plain text result, similar to copying HTML content rendered by\na browser to a text editor.\nHTML special characters are escaped.\n\n```\npolicy = Sanitize::Policy::Text.new\npolicy.process(%(foo <strong><a href=\"bar\">bar</a>!</strong>)) # => \"foo bar!\"\npolicy.process(%(<p>foo</p><p>bar</p>))                        # => \"foo bar\"\npolicy.block_whitespace = \"\\n\"\npolicy.process(%(<p>foo</p><p>bar</p>)) # => \"foo\\nbar\"\n```","summary":"<p>Reduces an HTML tree to the content of its text nodes.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"transform_tag(name:String,attributes:Hash(String,String)):String|CONTINUE|STOP-instance-method","html_id":"transform_tag(name:String,attributes:Hash(String,String)):String|CONTINUE|STOP-instance-method","name":"transform_tag","doc":"Receives the element name and attributes of an opening tag and returns the\ntransformed element name (usually the same as the input name).\n\n*attributes* are transformed directly in place.\n\nSpecial return values:\n* `Processor::CONTINUE`: Tells the processor to strip the current tag but\n  continue traversing its children.\n* `Processor::CONTINUE`: Tells the processor to skip the current tag and its\n  children completely and move to the next sibling.","summary":"<p>Receives the element name and attributes of an opening tag and returns the transformed element name (usually the same as the input name).</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String)) : String | CONTINUE | STOP","source_link":null,"def":{"name":"transform_tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | CONTINUE | STOP","visibility":"Public","body":"CONTINUE"}},{"id":"transform_text(text:String):String?-instance-method","html_id":"transform_text(text:String):String?-instance-method","name":"transform_text","doc":"Receives the content of a text node and returns the transformed content.\n\nIf the return value is `nil`, the content is skipped.","summary":"<p>Receives the content of a text node and returns the transformed content.</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String) : String?","source_link":null,"def":{"name":"transform_text","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"text"}}],"macros":[],"types":[]},{"html_id":"sanitize/Sanitize/Policy/Whitelist","path":"Sanitize/Policy/Whitelist.html","kind":"class","full_name":"Sanitize::Policy::Whitelist","name":"Whitelist","abstract":false,"superclass":{"html_id":"sanitize/Sanitize/Policy","kind":"class","full_name":"Sanitize::Policy","name":"Policy"},"ancestors":[{"html_id":"sanitize/Sanitize/Policy","kind":"class","full_name":"Sanitize::Policy","name":"Policy"},{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"sanitize/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"sanitize/Sanitize/Policy/HTMLSanitizer","kind":"class","full_name":"Sanitize::Policy::HTMLSanitizer","name":"HTMLSanitizer"}],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize/Policy","kind":"class","full_name":"Sanitize::Policy","name":"Policy"},"doc":"This is a simple policy based on a tag and attribute whitelist.\n\nThis policy accepts only `&lt;div&gt;` and `&lt;p&gt;` tags with optional `title` attributes:\n```\npolicy = Sanitize::Policy::Whitelist.new({\n  \"div\" => Set{\"title\"},\n  \"p\"   => Set{\"title\"},\n})\n```\n\nThe special `*` key applies to *all* tag names and can be used to allow global\nattributes:\n\nThis example is equivalent to the above. If more tag names were added, they\nwould also accept `title` attributes.\n```\npolicy = Sanitize::Policy::Whitelist.new({\n  \"div\" => Set(String).new,\n  \"p\"   => Set(String).new,\n  \"*\"   => Set{\"title\"},\n})\n```\n\nAttributes are always optional, so this policy won't enforce the presence of\nan attribute.\n\nIf a tag's attribute list is empty, no attributes are allowed for this tag.\n\nAttribute values are not changed by this policy.","summary":"<p>This is a simple policy based on a tag and attribute whitelist.</p>","class_methods":[],"constructors":[{"id":"new(accepted_attributes:Hash(String,Set(String)))-class-method","html_id":"new(accepted_attributes:Hash(String,Set(String)))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"accepted_attributes","doc":null,"default_value":"","external_name":"accepted_attributes","restriction":"Hash(String, Set(String))"}],"args_string":"(accepted_attributes : Hash(String, Set(String)))","source_link":null,"def":{"name":"new","args":[{"name":"accepted_attributes","doc":null,"default_value":"","external_name":"accepted_attributes","restriction":"Hash(String, Set(String))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(accepted_attributes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"accepted_attributes:Hash(String,Set(String))-instance-method","html_id":"accepted_attributes:Hash(String,Set(String))-instance-method","name":"accepted_attributes","doc":"Mapping of accepted tag names and attributes.","summary":"<p>Mapping of accepted tag names and attributes.</p>","abstract":false,"args":[],"args_string":" : Hash(String, Set(String))","source_link":null,"def":{"name":"accepted_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Set(String))","visibility":"Public","body":"@accepted_attributes"}},{"id":"accepted_attributes=(accepted_attributes:Hash(String,Set(String)))-instance-method","html_id":"accepted_attributes=(accepted_attributes:Hash(String,Set(String)))-instance-method","name":"accepted_attributes=","doc":"Mapping of accepted tag names and attributes.","summary":"<p>Mapping of accepted tag names and attributes.</p>","abstract":false,"args":[{"name":"accepted_attributes","doc":null,"default_value":"","external_name":"accepted_attributes","restriction":"Hash(String, Set(String))"}],"args_string":"(accepted_attributes : Hash(String, Set(String)))","source_link":null,"def":{"name":"accepted_attributes=","args":[{"name":"accepted_attributes","doc":null,"default_value":"","external_name":"accepted_attributes","restriction":"Hash(String, Set(String))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@accepted_attributes = accepted_attributes"}},{"id":"global_attributes-instance-method","html_id":"global_attributes-instance-method","name":"global_attributes","doc":"Short cut to `accepted_attributes[\"*\"]`.","summary":"<p>Short cut to <code>accepted_attributes[\"*\"]</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"global_attributes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (value = @global_attributes).nil?\n  @global_attributes = (accepted_attributes.fetch(\"*\") do\n    Set(String).new\n  end)\nelse\n  value\nend"}},{"id":"transform_attributes(name:String,attributes:Hash(String,String)):String|CONTINUE|STOP-instance-method","html_id":"transform_attributes(name:String,attributes:Hash(String,String)):String|CONTINUE|STOP-instance-method","name":"transform_attributes","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String)) : String | CONTINUE | STOP","source_link":null,"def":{"name":"transform_attributes","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | CONTINUE | STOP","visibility":"Public","body":"name"}},{"id":"transform_tag(name:String,attributes:Hash(String,String)):String|CONTINUE|STOP-instance-method","html_id":"transform_tag(name:String,attributes:Hash(String,String)):String|CONTINUE|STOP-instance-method","name":"transform_tag","doc":"Receives the element name and attributes of an opening tag and returns the\ntransformed element name (usually the same as the input name).\n\n*attributes* are transformed directly in place.\n\nSpecial return values:\n* `Processor::CONTINUE`: Tells the processor to strip the current tag but\n  continue traversing its children.\n* `Processor::CONTINUE`: Tells the processor to skip the current tag and its\n  children completely and move to the next sibling.","summary":"<p>Receives the element name and attributes of an opening tag and returns the transformed element name (usually the same as the input name).</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String)) : String | CONTINUE | STOP","source_link":null,"def":{"name":"transform_tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | CONTINUE | STOP","visibility":"Public","body":"acceptable_attributes = accepted_attributes.fetch(name) do\n  return CONTINUE\nend\nattributes.delete_if do |attr, _|\n  (!(acceptable_attributes.includes?(attr))) && (!(global_attributes.includes?(attr)))\nend\ntransform_attributes(name, attributes)\n"}},{"id":"transform_text(text:String):String?-instance-method","html_id":"transform_text(text:String):String?-instance-method","name":"transform_text","doc":"Receives the content of a text node and returns the transformed content.\n\nIf the return value is `nil`, the content is skipped.","summary":"<p>Receives the content of a text node and returns the transformed content.</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String) : String?","source_link":null,"def":{"name":"transform_text","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"text"}}],"macros":[],"types":[]}]},{"html_id":"sanitize/Sanitize/Processor","path":"Sanitize/Processor.html","kind":"class","full_name":"Sanitize::Processor","name":"Processor","abstract":false,"superclass":{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"sanitize/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(self)","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize","kind":"module","full_name":"Sanitize","name":"Sanitize"},"doc":"A processor traverses the HTML/XML tree, applies transformations through the\npolicy and passes the result to the adapter which then builds the result.","summary":"<p>A processor traverses the HTML/XML tree, applies transformations through the policy and passes the result to the adapter which then builds the result.</p>","class_methods":[],"constructors":[{"id":"new(policy:Policy,adapter:Adapter)-class-method","html_id":"new(policy:Policy,adapter:Adapter)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":"Policy"},{"name":"adapter","doc":null,"default_value":"","external_name":"adapter","restriction":"Adapter"}],"args_string":"(policy : Policy, adapter : Adapter)","source_link":null,"def":{"name":"new","args":[{"name":"policy","doc":null,"default_value":"","external_name":"policy","restriction":"Policy"},{"name":"adapter","doc":null,"default_value":"","external_name":"adapter","restriction":"Adapter"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(policy, adapter)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"process_element(orig_name:String,attributes:Hash(String,String),name,&)-instance-method","html_id":"process_element(orig_name:String,attributes:Hash(String,String),name,&)-instance-method","name":"process_element","doc":null,"summary":null,"abstract":false,"args":[{"name":"orig_name","doc":null,"default_value":"","external_name":"orig_name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(orig_name : String, attributes : Hash(String, String), name, &)","source_link":null,"def":{"name":"process_element","args":[{"name":"orig_name","doc":null,"default_value":"","external_name":"orig_name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"case name\nwhen STOP\n  Log.debug do\n    \"#{@policy.class} stopping at tag #{orig_name} #{attributes}\"\n  end\n  if @policy.block_tag?(orig_name)\n    @stripped_block_tag = true\n  end\n  return\nwhen CONTINUE\n  Log.debug do\n    \"#{@policy.class} stripping tag #{orig_name} #{attributes}\"\n  end\n  if @policy.block_tag?(orig_name)\n    @stripped_block_tag = true\n  end\nwhen String\n  @stripped_block_tag = false\n  @adapter.start_tag(name, attributes)\nend\nyield\ncase name\nwhen CONTINUE\n  if @policy.block_tag?(orig_name)\n    @stripped_block_tag = true\n  end\nwhen String\n  @stripped_block_tag = false\n  @adapter.end_tag(name, attributes)\nend\n"}},{"id":"process_element(name:String,attributes:Hash(String,String),&)-instance-method","html_id":"process_element(name:String,attributes:Hash(String,String),&)-instance-method","name":"process_element","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"args_string":"(name : String, attributes : Hash(String, String), &)","source_link":null,"def":{"name":"process_element","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attributes","doc":null,"default_value":"","external_name":"attributes","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"process_element(name, attributes, @policy.transform_tag(name, attributes)) do\n  yield\nend"}},{"id":"process_text(text:String)-instance-method","html_id":"process_text(text:String)-instance-method","name":"process_text","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String)","source_link":null,"def":{"name":"process_text","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"text = @policy.transform_text(text)\nif (@stripped_block_tag && (!@last_text_ended_with_whitespace)) && (!text.try do |__arg0|\n  __arg0[0].whitespace?\nend)\n  @adapter.write_text(@policy.block_whitespace)\nend\n@stripped_block_tag = false\nif text\n  @adapter.write_text(text)\n  @last_text_ended_with_whitespace = text[-1].whitespace?\nelse\n  @last_text_ended_with_whitespace = false\nend\n"}},{"id":"reset-instance-method","html_id":"reset-instance-method","name":"reset","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@last_text_ended_with_whitespace = true\n@stripped_block_tag = false\n"}}],"macros":[],"types":[{"html_id":"sanitize/Sanitize/Processor/CONTINUE","path":"Sanitize/Processor/CONTINUE.html","kind":"module","full_name":"Sanitize::Processor::CONTINUE","name":"CONTINUE","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"sanitize/Sanitize/Processor/CONTINUE","kind":"module","full_name":"Sanitize::Processor::CONTINUE","name":"CONTINUE"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize/Processor","kind":"class","full_name":"Sanitize::Processor","name":"Processor"},"doc":"This module serves as a singleton constant that signals the processor to\nskip the current tag but continue to traverse its children.","summary":"<p>This module serves as a singleton constant that signals the processor to skip the current tag but continue to traverse its children.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"sanitize/Sanitize/Processor/STOP","path":"Sanitize/Processor/STOP.html","kind":"module","full_name":"Sanitize::Processor::STOP","name":"STOP","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"sanitize/Sanitize/Processor/STOP","kind":"module","full_name":"Sanitize::Processor::STOP","name":"STOP"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize/Processor","kind":"class","full_name":"Sanitize::Processor","name":"Processor"},"doc":"This module serves as a singleton constant that signals the processor to\nskip the current tag and its children.","summary":"<p>This module serves as a singleton constant that signals the processor to skip the current tag and its children.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"sanitize/Sanitize/URISanitizer","path":"Sanitize/URISanitizer.html","kind":"class","full_name":"Sanitize::URISanitizer","name":"URISanitizer","abstract":false,"superclass":{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"sanitize/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"sanitize/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"sanitize","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"sanitize/Sanitize","kind":"module","full_name":"Sanitize","name":"Sanitize"},"doc":"A `URISanitizer` is used to validate and transform a URI based on specified\nrules.","summary":"<p>A <code><a href=\"../Sanitize/URISanitizer.html\">URISanitizer</a></code> is used to validate and transform a URI based on specified rules.</p>","class_methods":[],"constructors":[{"id":"new(accepted_schemes:Set(String)?=Set{&quot;http&quot;,&quot;https&quot;,&quot;mailto&quot;,&quot;tel&quot;})-class-method","html_id":"new(accepted_schemes:Set(String)?=Set{&quot;http&quot;,&quot;https&quot;,&quot;mailto&quot;,&quot;tel&quot;})-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"accepted_schemes","doc":null,"default_value":"Set {\"http\", \"https\", \"mailto\", \"tel\"}","external_name":"accepted_schemes","restriction":"Set(String) | ::Nil"}],"args_string":"(accepted_schemes : Set(String)? = <span class=\"t\">Set</span> {<span class=\"s\">&quot;http&quot;</span>, <span class=\"s\">&quot;https&quot;</span>, <span class=\"s\">&quot;mailto&quot;</span>, <span class=\"s\">&quot;tel&quot;</span>})","source_link":null,"def":{"name":"new","args":[{"name":"accepted_schemes","doc":null,"default_value":"Set {\"http\", \"https\", \"mailto\", \"tel\"}","external_name":"accepted_schemes","restriction":"Set(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(accepted_schemes)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"accept_scheme(scheme:String)-instance-method","html_id":"accept_scheme(scheme:String)-instance-method","name":"accept_scheme","doc":"Adds *scheme* to `accepted_schemes`.","summary":"<p>Adds <em>scheme</em> to <code><a href=\"../Sanitize/URISanitizer.html#accepted_schemes:Set(String)?-instance-method\">#accepted_schemes</a></code>.</p>","abstract":false,"args":[{"name":"scheme","doc":null,"default_value":"","external_name":"scheme","restriction":"String"}],"args_string":"(scheme : String)","source_link":null,"def":{"name":"accept_scheme","args":[{"name":"scheme","doc":null,"default_value":"","external_name":"scheme","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"schemes = self.accepted_schemes || (self.accepted_schemes = Set(String).new)\nschemes << scheme\n"}},{"id":"accepted_hosts:Set(String)?-instance-method","html_id":"accepted_hosts:Set(String)?-instance-method","name":"accepted_hosts","doc":"Specifies a whitelist of hosts this sanitizer accepts.\n\nIf empty, no hosts are accepted (i.e. only relative URIs are valid).\nIf `nil`, all hosts are accepted (default).\n\nThe blacklist `rejected_hosts` has precedence over this whitelist.","summary":"<p>Specifies a whitelist of hosts this sanitizer accepts.</p>","abstract":false,"args":[],"args_string":" : Set(String)?","source_link":null,"def":{"name":"accepted_hosts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(String) | ::Nil","visibility":"Public","body":"@accepted_hosts"}},{"id":"accepted_hosts=(accepted_hosts:Set(String)?)-instance-method","html_id":"accepted_hosts=(accepted_hosts:Set(String)?)-instance-method","name":"accepted_hosts=","doc":"Specifies a whitelist of hosts this sanitizer accepts.\n\nIf empty, no hosts are accepted (i.e. only relative URIs are valid).\nIf `nil`, all hosts are accepted (default).\n\nThe blacklist `rejected_hosts` has precedence over this whitelist.","summary":"<p>Specifies a whitelist of hosts this sanitizer accepts.</p>","abstract":false,"args":[{"name":"accepted_hosts","doc":null,"default_value":"","external_name":"accepted_hosts","restriction":"Set(String) | ::Nil"}],"args_string":"(accepted_hosts : Set(String)?)","source_link":null,"def":{"name":"accepted_hosts=","args":[{"name":"accepted_hosts","doc":null,"default_value":"","external_name":"accepted_hosts","restriction":"Set(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@accepted_hosts = accepted_hosts"}},{"id":"accepted_schemes:Set(String)?-instance-method","html_id":"accepted_schemes:Set(String)?-instance-method","name":"accepted_schemes","doc":"Specifies a whitelist of URI schemes this sanitizer accepts.\n\nIf empty, no schemes are accepted (i.e. only relative URIs are valid).\nIf `nil`, all schemes are accepted (this setting is potentially dangerous).\n\nRelative URIs are not affected by this setting.","summary":"<p>Specifies a whitelist of URI schemes this sanitizer accepts.</p>","abstract":false,"args":[],"args_string":" : Set(String)?","source_link":null,"def":{"name":"accepted_schemes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(String) | ::Nil","visibility":"Public","body":"@accepted_schemes"}},{"id":"accepted_schemes=(accepted_schemes:Set(String)?)-instance-method","html_id":"accepted_schemes=(accepted_schemes:Set(String)?)-instance-method","name":"accepted_schemes=","doc":"Specifies a whitelist of URI schemes this sanitizer accepts.\n\nIf empty, no schemes are accepted (i.e. only relative URIs are valid).\nIf `nil`, all schemes are accepted (this setting is potentially dangerous).\n\nRelative URIs are not affected by this setting.","summary":"<p>Specifies a whitelist of URI schemes this sanitizer accepts.</p>","abstract":false,"args":[{"name":"accepted_schemes","doc":null,"default_value":"","external_name":"accepted_schemes","restriction":"Set(String) | ::Nil"}],"args_string":"(accepted_schemes : Set(String)?)","source_link":null,"def":{"name":"accepted_schemes=","args":[{"name":"accepted_schemes","doc":null,"default_value":"","external_name":"accepted_schemes","restriction":"Set(String) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@accepted_schemes = accepted_schemes"}},{"id":"accepts_host?(host)-instance-method","html_id":"accepts_host?(host)-instance-method","name":"accepts_host?","doc":null,"summary":null,"abstract":false,"args":[{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":""}],"args_string":"(host)","source_link":null,"def":{"name":"accepts_host?","args":[{"name":"host","doc":null,"default_value":"","external_name":"host","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if host.nil?\n  return true\nend\nif rejected_hosts.includes?(host)\n  return false\nend\nif accepted_hosts = self.accepted_hosts\n  if accepted_hosts.includes?(host)\n  else\n    return false\n  end\nend\ntrue\n"}},{"id":"accepts_scheme?(scheme)-instance-method","html_id":"accepts_scheme?(scheme)-instance-method","name":"accepts_scheme?","doc":null,"summary":null,"abstract":false,"args":[{"name":"scheme","doc":null,"default_value":"","external_name":"scheme","restriction":""}],"args_string":"(scheme)","source_link":null,"def":{"name":"accepts_scheme?","args":[{"name":"scheme","doc":null,"default_value":"","external_name":"scheme","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if scheme.nil?\n  return true\nend\nif accepted_schemes = self.accepted_schemes\n  return accepted_schemes.includes?(scheme)\nend\ntrue\n"}},{"id":"base_url:URI?-instance-method","html_id":"base_url:URI?-instance-method","name":"base_url","doc":"Specifies a base URL all relative URLs are resolved against.\n\nIf `nil`, relative URLs are not resolved.","summary":"<p>Specifies a base URL all relative URLs are resolved against.</p>","abstract":false,"args":[],"args_string":" : URI?","source_link":null,"def":{"name":"base_url","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"URI | ::Nil","visibility":"Public","body":"@base_url"}},{"id":"base_url=(base_url:URI?)-instance-method","html_id":"base_url=(base_url:URI?)-instance-method","name":"base_url=","doc":"Specifies a base URL all relative URLs are resolved against.\n\nIf `nil`, relative URLs are not resolved.","summary":"<p>Specifies a base URL all relative URLs are resolved against.</p>","abstract":false,"args":[{"name":"base_url","doc":null,"default_value":"","external_name":"base_url","restriction":"URI | ::Nil"}],"args_string":"(base_url : URI?)","source_link":null,"def":{"name":"base_url=","args":[{"name":"base_url","doc":null,"default_value":"","external_name":"base_url","restriction":"URI | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@base_url = base_url"}},{"id":"rejected_hosts:Set(String)-instance-method","html_id":"rejected_hosts:Set(String)-instance-method","name":"rejected_hosts","doc":"Specifies a blacklist of hosts this sanitizer rejects.\n\nIf empty, no hosts are rejected.\n\nThis blacklist has precedence over the whitelist `accepted_hosts`.","summary":"<p>Specifies a blacklist of hosts this sanitizer rejects.</p>","abstract":false,"args":[],"args_string":" : Set(String)","source_link":null,"def":{"name":"rejected_hosts","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Set(String)","visibility":"Public","body":"@rejected_hosts"}},{"id":"rejected_hosts=(rejected_hosts:Set(String))-instance-method","html_id":"rejected_hosts=(rejected_hosts:Set(String))-instance-method","name":"rejected_hosts=","doc":"Specifies a blacklist of hosts this sanitizer rejects.\n\nIf empty, no hosts are rejected.\n\nThis blacklist has precedence over the whitelist `accepted_hosts`.","summary":"<p>Specifies a blacklist of hosts this sanitizer rejects.</p>","abstract":false,"args":[{"name":"rejected_hosts","doc":null,"default_value":"","external_name":"rejected_hosts","restriction":"Set(String)"}],"args_string":"(rejected_hosts : Set(String))","source_link":null,"def":{"name":"rejected_hosts=","args":[{"name":"rejected_hosts","doc":null,"default_value":"","external_name":"rejected_hosts","restriction":"Set(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@rejected_hosts = rejected_hosts"}},{"id":"resolve_base_url(uri)-instance-method","html_id":"resolve_base_url(uri)-instance-method","name":"resolve_base_url","doc":null,"summary":null,"abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":""}],"args_string":"(uri)","source_link":null,"def":{"name":"resolve_base_url","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if base_url = self.base_url\n  if uri.absolute? || ((!resolve_fragment_urls) && (fragment_url?(uri)))\n  else\n    uri = base_url.resolve(uri)\n  end\nend\nuri\n"}},{"id":"resolve_fragment_urls:Bool-instance-method","html_id":"resolve_fragment_urls:Bool-instance-method","name":"resolve_fragment_urls","doc":"Configures whether fragment-only URIs are resolved on `base_url`.\n\n```cr\nsanitizer = Sanitize::URISanitizer.new\nsanitizer.base_url = URI.parse(\"https://example.com/base/\")\nsanitizer.sanitize(URI.parse(\"#foo\")) # => \"#foo\"\n\nsanitizer.resolve_fragment_urls = true\nsanitizer.sanitize(URI.parse(\"#foo\")) # => \"https://example.com/base/#foo\"\n```","summary":"<p>Configures whether fragment-only URIs are resolved on <code><a href=\"../Sanitize/URISanitizer.html#base_url:URI?-instance-method\">#base_url</a></code>.</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"resolve_fragment_urls","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@resolve_fragment_urls"}},{"id":"resolve_fragment_urls=(resolve_fragment_urls)-instance-method","html_id":"resolve_fragment_urls=(resolve_fragment_urls)-instance-method","name":"resolve_fragment_urls=","doc":"Configures whether fragment-only URIs are resolved on `base_url`.\n\n```cr\nsanitizer = Sanitize::URISanitizer.new\nsanitizer.base_url = URI.parse(\"https://example.com/base/\")\nsanitizer.sanitize(URI.parse(\"#foo\")) # => \"#foo\"\n\nsanitizer.resolve_fragment_urls = true\nsanitizer.sanitize(URI.parse(\"#foo\")) # => \"https://example.com/base/#foo\"\n```","summary":"<p>Configures whether fragment-only URIs are resolved on <code><a href=\"../Sanitize/URISanitizer.html#base_url:URI?-instance-method\">#base_url</a></code>.</p>","abstract":false,"args":[{"name":"resolve_fragment_urls","doc":null,"default_value":"","external_name":"resolve_fragment_urls","restriction":""}],"args_string":"(resolve_fragment_urls)","source_link":null,"def":{"name":"resolve_fragment_urls=","args":[{"name":"resolve_fragment_urls","doc":null,"default_value":"","external_name":"resolve_fragment_urls","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@resolve_fragment_urls = resolve_fragment_urls"}},{"id":"sanitize(uri:URI):URI?-instance-method","html_id":"sanitize(uri:URI):URI?-instance-method","name":"sanitize","doc":null,"summary":null,"abstract":false,"args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"URI"}],"args_string":"(uri : URI) : URI?","source_link":null,"def":{"name":"sanitize","args":[{"name":"uri","doc":null,"default_value":"","external_name":"uri","restriction":"URI"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"URI | ::Nil","visibility":"Public","body":"if accepts_scheme?(uri.scheme)\nelse\n  return nil\nend\nif accepts_host?(uri.host)\nelse\n  return nil\nend\nuri = resolve_base_url(uri)\nuri\n"}}],"macros":[],"types":[]}]}]}}